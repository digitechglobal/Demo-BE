openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
  - description: API demo Users
    url: http://192.168.100.20:3000/api/
info:
  description: APIs document Demo User Login
  version: "1.0.0"
  title: APIs Demo Users Login _DoubleTruong_Thu
  termsOfService: 
  contact:
    email: 
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: User
    description: Operations about user
paths:
  /users:
    get:
      tags:
        - user
      summary: Returns a list of users.
      description: Optional extended description in CommonMark or HTML.
      responses:
        'success: 1':
          description: A JSON array of user
          content:
            application/json:
              schema: 
                type: array
                items: 
                  type: string
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      parameters:
        - name: firstName
          in: query
          description: First name for register
          required: true
          schema:
            type: string
        - name: lastName
          in: query
          description: last name for register
          required: false
          schema:
            type: string
        - name: gender
          in: query
          description: gender for register
          required: false
          schema:
            type: string
        - name: email
          in: query
          description: The email for register
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for register
          required: true
          schema:
            type: string
        - name: number
          in: query
          description: number for register
          required: false
          schema:
            type: string
      responses:
        'success : 0' : 
          description: Database connection error
        'success : -1' : 
          description: Email Existence. Please enter another email.
        'success : 1':
          description: created successfully
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
    patch:
      tags:
        - user
      summary: Update Profile user
      description: 
      operationId: UpdateUser
      parameters:
        - name: firstName
          in: query
          description: First name of user
          required: true
          schema:
            type: string
        - name: lastName
          in: query
          description: Last name of user
          required: true
          schema:
            type: string
        - name: gender
          in: query
          description: gender of user
          required: true
          schema:
            type: string
        - name: email
          in: query
          description: The email of user
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password of user
          required: true
          schema:
            type: string
        - name: number
          in: query
          description: number of user
          required: true
          schema:
            type: string
        - name: id
          in: query
          description: id of user
          required: true
          schema:
            type: string
      responses:
        'success : 0' : 
          description: Failed to update user
        'success : 1':
          description: updated successfully

  /users/id:
    get:
      tags:
        - user
      summary: Returns a user.
      description:
      parameters:
        - name: id
          in: query
          description: The id of user
          required: true
          schema:
            type: string
      responses:
        'success: 1':
          description: Got a user
        'success: 0':
          description: Record not Found
    delete:
      tags:
        - user
      summary: Delete a user.
      description:
      parameters:
        - name: id
          in: query
          description: The id of user
          required: true
          schema:
            type: string
      responses:
        'success: 1':
          description: User deleted successfully
        'success: 0':
          description: Record not Found


  /users/login2:
    post:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: email
          in: query
          description: The email for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        'success: 1':
          description: login successfully
        'success: -1':
          description: Invalid email
        'success: 0':
          description: Invalid password


components:
  schemas:
    Users:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        gender:
          type: string
        email:
          type: string
        password:
          type: string
        number:
          type: string
      xml:
        name: User
  requestBodies:
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true
  securitySchemes:
    test_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://test-swagger.herokuapp.com'
          scopes:
            'write:users': modify your account
            'read:users': read your information
    api_key:
      type: apiKey
      name: api_key
      in: header